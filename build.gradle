/*
 * Copyright (c) 2021.  Jefferson Science Associates, LLC.
 * Subject to the terms in the LICENSE file found in the top-level directory.
 * Author gyurjyan
 */

plugins {
    id 'com.google.protobuf' version '0.8.15' apply false
    id 'com.github.spotbugs' version '4.6.2' apply false
}

allprojects {
    group = 'org.jlab.epsci'
    version = '1.0-SNAPSHOT'

    defaultTasks 'build'
}

apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'
apply plugin: 'groovy'
apply plugin: 'maven-publish'

apply plugin: 'checkstyle'
apply plugin: 'codenarc'
apply plugin: 'com.github.spotbugs'

apply plugin: 'eclipse'
apply plugin: 'idea'


repositories {
    maven {
        url 'https://clasweb.jlab.org/clas12maven/'
    }
    mavenCentral()
}

java {
    withSourcesJar()
    withJavadocJar()
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
    useJUnitPlatform {
        excludeTags 'integration'
    }
    systemProperty 'spock.configuration', rootProject.file('config/test/SpockConfig.groovy')
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'spock.configuration', rootProject.file('config/test/SpockConfigIntegration.groovy')
    testLogging {
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false }
}

tasks.withType(GroovyCompile).configureEach {
    options.incremental = true
}

task allDeps(type: DependencyReportTask) {}

task allDepInsight(type: DependencyInsightReportTask) doLast {}

//////////////////////////////////////////////////////////////////////////////
// dependencies
//////////////////////////////////////////////////////////////////////////////

ext.libs = [
    jeromq  : 'org.zeromq:jeromq:0.5.2',
    protobuf: 'com.google.protobuf:protobuf-java:3.15.5',
    protoc  : 'com.google.protobuf:protoc:3.15.5',
    jopt    : 'net.sf.jopt-simple:jopt-simple:5.0.4',
    jsr305  : 'com.google.code.findbugs:jsr305:3.0.2'
]

ext.test_libs = [
    jupiter_api   : 'org.junit.jupiter:junit-jupiter-api:5.7.1',
    jupiter_engine: 'org.junit.jupiter:junit-jupiter-engine:5.7.1',
    groovy        : 'org.codehaus.groovy:groovy:3.0.7',
    spock         : 'org.spockframework:spock-core:2.0-M4-groovy-3.0',
    hamcrest      : 'org.hamcrest:hamcrest:2.2'
]

dependencies {
    api 'org.jlab.coda:xmsg:2.3'
    api 'org.jline:jline:3.1.3'
    api 'org.json:json:20201115'
    implementation 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    implementation 'org.freemarker:freemarker:2.3.31'
    implementation 'org.yaml:snakeyaml:1.28'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'org.jlab.coda:jinflux:1.0-SNAPSHOT'
    implementation 'org.jetbrains:annotations:24.0.1'

    constraints {
        codenarc(test_libs.groovy)
    }

    compileOnly libs.jsr305

    testImplementation test_libs.jupiter_api
    testImplementation test_libs.groovy
    testImplementation test_libs.spock
    testRuntimeOnly test_libs.jupiter_engine
    testImplementation test_libs.hamcrest
}

//////////////////////////////////////////////////////////////////////////////
// version information
//////////////////////////////////////////////////////////////////////////////

def runGit(cmd) {
    rootProject.file('.git').exists() ? cmd.execute().text.trim() : ''
}

ext {
    gitBranch = properties['gitBranch'] ?: runGit('git rev-parse --abbrev-ref HEAD')
    gitRev = properties['gitRev'] ?: runGit('git rev-parse --short=10 HEAD')
    gitDescribe = properties['gitDescribe'] ?: runGit('git describe --match=v[0-9]* --abbrev=10 HEAD')
}

task generateVersionProperties {
    def propertiesFile = file("${buildDir}/resources/main/META-INF/version.properties")

    inputs.property 'version', project.version
    inputs.property 'groupId', project.group
    inputs.property 'artifactId', project.archivesBaseName
    inputs.property 'gitBranch', gitBranch
    inputs.property 'gitRev', gitRev
    inputs.property 'gitDescribe', gitDescribe
    outputs.file propertiesFile

    doLast {
        propertiesFile.write "version=${project.version}\n"
        propertiesFile.append "groupId=${project.group}\n"
        propertiesFile.append "artifactId=${project.archivesBaseName}\n"
        propertiesFile.append "builtBy=${System.getProperty('user.name')}\n"
        propertiesFile.append "builtJDK=${System.getProperty('java.version')}\n"

        if (gitBranch) {
            propertiesFile.append "git.branch=${gitBranch}\n"
        }
        if (gitRev) {
            propertiesFile.append "git.revision=${gitRev}\n"
        }
        if (gitDescribe) {
            propertiesFile.append "git.describe=${gitDescribe}\n"
        }
    }
}

tasks.named('javadoc') {
    dependsOn tasks.named('generateVersionProperties')
    options.charSet = 'utf8'
    options.encoding = 'utf8'
    options.docEncoding = 'utf8'
}

tasks.named('checkstyleMain') {
    dependsOn tasks.named('generateVersionProperties')
}

jar.dependsOn generateVersionProperties

//////////////////////////////////////////////////////////////////////////////
// deployment
//////////////////////////////////////////////////////////////////////////////

def deploySpec = copySpec {
    into ('lib') {
        from configurations.runtimeClasspath
        from jar.archiveFile
    }

    from ('scripts/unix') {
        into 'bin'
        exclude 'etc'
        fileMode 0755
    }

    from ('scripts/lib') {
        into 'lib/ersap'
        fileMode 0755
    }

    // trick Gradle to "create" empy directories
    def tempDir = "${buildDir}/distributions/ersap_home"

    file("${tempDir}/log").mkdirs()
    file("${tempDir}/plugins").mkdirs()

    from tempDir
}

task deploy(type: Copy) {
    def dest = "$System.env.ERSAP_HOME"

    into dest
    with deploySpec

    doFirst {
        if (dest == 'null') {
            throw new GradleException('ERSAP_HOME not set')
        }
    }

}


//////////////////////////////////////////////////////////////////////////////
// development scripts
//////////////////////////////////////////////////////////////////////////////

ext {
    // used by scripts in `scripts/dev/*` through `scripts/exec-class`
    classPathCache = file("${buildDir}/tmp/classpath")
    testClassPathCache = file("${buildDir}/tmp/test_classpath")
}

task cacheClasspath {
    inputs.files sourceSets.main.runtimeClasspath
    inputs.files sourceSets.test.runtimeClasspath
    outputs.files classPathCache
    outputs.files testClassPathCache
    doLast {
        classPathCache.write sourceSets.main.runtimeClasspath.asPath
        testClassPathCache.write sourceSets.test.runtimeClasspath.asPath
    }
}

task printClasspath {
    doLast {
        println classPathCache.text.replace(':', '\n')
    }
    dependsOn cacheClasspath
}

assemble.dependsOn cacheClasspath

//////////////////////////////////////////////////////////////////////////////
// quality check
//////////////////////////////////////////////////////////////////////////////

ext {
    ciMode = properties['ciMode'] ?: 'false'
}

checkstyle {
    toolVersion = '8.41'
    configFile = rootProject.file('config/quality/checkstyle.xml')
    configProperties['samedir'] = rootProject.file('config/quality')
}

codenarc {
    toolVersion = '2.0.0'
    ignoreFailures = true
    configFile = rootProject.file('config/quality/codenarc.groovy')
    if (ciMode.toBoolean()) {
        reportFormat 'console'
    }
}

spotbugs {
    toolVersion = '4.2.2'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = rootProject.file('config/quality/findbugs-exclude.xml')
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    def useXml = ciMode.toBoolean()
    reports {
        xml.enabled = useXml
        html.enabled = !useXml
    }
}

task checkSpotBugsResults {
    doLast {
        def bugsFound = 0
        subprojectList.each { subproject ->
            [subproject.spotbugsMain, subproject.spotbugsTest].each { task ->
                try {
                    bugsFound += printSpotBugs task.reports.getByName('XML').destination
                } catch (FileNotFoundException e) {
                    logger.info e.message
                }
            }
        }
        if (bugsFound > 0) {
            throw new GradleException("$bugsFound SpotBugs rule violations were found.")
        }
    }
}

def printSpotBugs(File xml) {
    def slurped = new XmlSlurper().parse(xml)
    def bugs = slurped.BugInstance
    bugs.each { bug ->
        def line = bug.SourceLine
        logger.error "[SpotBugs] ${line.@sourcepath}:${line.@start}:${line.@end} [${bug.@type}]"
    }
    bugs.size()
}

task codenarc {
    group = 'Verification'
    description = 'Marker task to enable codenarc.'
}

task spotbugs {
    group = 'Verification'
    description = 'Marker task to enable SpotBugs.'

    if (ciMode.toBoolean()) {
        finalizedBy checkSpotBugsResults
    }
}
// Ensure docs and codeâ€‘style checks wait for the generated properties
tasks.named('javadoc') {
    dependsOn 'generateVersionProperties'
    inputs.dir("$buildDir/resources/main")
}

tasks.withType(Checkstyle).configureEach {
    dependsOn 'generateVersionProperties'
    inputs.dir("$buildDir/resources/main")
}
//////////////////////////////////////////////////////////////////////////////
// IDE configuration
//////////////////////////////////////////////////////////////////////////////

eclipse {
    classpath {
        file {
            defaultOutputDir = file("${buildDir.name}/eclipse/default")
            whenMerged { classpath ->
                classpath.entries.each { source ->
                    if (source.kind == 'src' && source.hasProperty('output')) {
                        source.output = source.output.replace('bin', "${buildDir.name}/eclipse")
                    }
                }
            }
        }
    }
}

